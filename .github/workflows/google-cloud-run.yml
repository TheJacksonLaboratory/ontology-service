name: Google Cloud Run Java CD
on:
  workflow_dispatch:
    inputs:
      ontology:
        description: 'The ontology to use.'
        required: true
        type: string
      international:
        description: 'Is the ontology babelon international?'
        default: false
        type: boolean
      load:
        description: 'Should load the data?'
        default: true
        type: boolean
env:
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  GCLOUD_REGISTRY_PROJECT_ID: ${{ secrets.GCLOUD_REGISTRY_PROJECT_ID }}
  GCLOUD_REGION: us-east1
  GCLOUD_GCR: us-east1-docker.pkg.dev
  ONTOLOGY: ${{ inputs.ontology }}
  ONTOLOGY_SERVICE_LOAD: ${{ inputs.load }}
  ONTOLOGY_SERVICE_INTERNATIONAL: ${{ inputs.international }}
  SERVICE_NAME: ontology-service-${{ inputs.ontology }}
  SERVICE_TAG: ''
  SHOULD_DEPLOY: false


jobs:
  watcher:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCLOUD_SA_KEY }}'

      - name: Setup Google Cloud CLI
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Get latest tag_name
        uses: sergeysova/jq-action@v2
        id: tag
        with:
          cmd: "curl https://api.github.com/repos/obophenotype/human-phenotype-ontology/releases/latest | jq -r '.tag_name'"

      - name: Get latest SHA
        uses: sergeysova/jq-action@v2
        id: sha
        with:
          cmd: "curl https://api.github.com/repos/obophenotype/human-phenotype-ontology/git/ref/tags/${{ steps.tag.outputs.value }} | jq -r '.object.sha' | cut -c -7"

      - name:  Get existing SHA for service
        id: existing
        run:  |
          EXISTING=$(gcloud container images list-tags us-east1-docker.pkg.dev/jax-robinson-hpo-01/docker-dev/ontology/ontology-service-hp | head -n 2 | tail -n 1 | awk '{print $2}')
          echo "value=$EXISTING" >> $GITHUB_OUTPUT

      - name: Compare and configure
        run: |
          echo "SHOULD_DEPLOY=${{steps.sha.outputs.value != steps.existing.outputs.value }}" >> $GITHUB_ENV
          echo "SERVICE_TAG="${{steps.sha.outputs.value}}"" >> $GITHUB_ENV
  build:
    if: ${{ env.SHOULD_DEPLOY == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2/repository
          key: ${{ runner.os }}-gradle-test-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-test-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCLOUD_SA_KEY }}'

      - name: Setup Google Cloud CLI
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Get ontology data
        run: |
          bash ontology.sh hp
      - name: Docker Login
        run: |
          gcloud auth configure-docker us-east1-docker.pkg.dev
      - name: Build And Push Docker Image
        env:
          GCLOUD_IMAGE_REPOSITORY: ${{ secrets.GCLOUD_IMAGE_REPOSITORY }}
          TESTCONTAINERS_RYUK_DISABLED: true
        run: |
          export DOCKER_IMAGE=`echo "${GCLOUD_GCR}/${GCLOUD_PROJECT_ID}/${GCLOUD_IMAGE_REPOSITORY}/$SERVICE_NAME:$SERVICE_TAG" | sed -e 's#//#/#' -e 's#^/##'`
          echo "${GCLOUD_GCR}/${GCLOUD_REGISTRY_PROJECT_ID}/${GCLOUD_IMAGE_REPOSITORY}/$SERVICE_NAME" | sed 's/./& /g'
          ./gradlew check dockerPush --no-daemon
      - name: Deploy Cloud Run
        run: |
          DOCKER_IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}" | grep ontology-service)
          DOCKER_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" "${DOCKER_IMAGE_REPOSITORY}" )

          gcloud run deploy $SERVICE_NAME --quiet \
            --image "${DOCKER_IMAGE}" --project "${GCLOUD_PROJECT_ID}" \
            --region "${GCLOUD_REGION}" --platform managed --allow-unauthenticated --format json \
            --memory 4Gi --cpu 2
      
          echo "Invoke endpoint:"
          gcloud run services list --platform managed --format json | jq -r \
            '.[] | select(.metadata.name == "google-cloud-run-maven-test") | .status.address.url'
