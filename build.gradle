plugins {
    id("groovy") 
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.1.0"
    id("io.micronaut.test-resources") version "4.1.0"
}

version = "0.5.1"
group = "org.jacksonlaboratory"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("jakarta.persistence:jakarta.persistence-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.flywaydb:flyway-mysql")
    runtimeOnly("com.h2database:h2:2.1.214")
    implementation('org.apache.lucene:lucene-core:8.5.2')
    implementation('org.apache.lucene:lucene-queryparser:8.5.2')
    implementation('org.hibernate.search:hibernate-search-mapper-orm:6.1.8.Final')
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-jackson-databind")
    compileOnly("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.validation:micronaut-validation:4.0.3")
    implementation("org.monarchinitiative.phenol:phenol-core:2.0.2"){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation("org.monarchinitiative.phenol:phenol-io:2.0.2"){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation("org.monarchinitiative.phenol:phenol-annotations:2.0.2"){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation('org.objenesis:objenesis:3.3')
}


application {
    mainClass.set("org.jacksonlaboratory.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

tasks.register('prepareData') {
    copy {
        from "${projectDir}/data/"
        into "build/docker/main/data/"
    }
}

tasks {
    dockerfile {
        baseImage("openjdk:17-jdk-slim")
        copyFile("data/", "data/")
        environmentVariable(['ONTOLOGY':"${System.env.ONTOLOGY}".toString(),
                             'ONTOLOGY_SERVICE_LOAD':"${System.env.ONTOLOGY_SERVICE_LOAD}".toString(),
                             'ONTOLOGY_SERVICE_INTERNATIONAL':"${System.env.ONTOLOGY_SERVICE_INTERNATIONAL}".toString()] )
        entryPoint("java", "-Xmx6g", "-Xms1024m", "-jar", "/home/app/application.jar")
    }

    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: "${project.name}:${project.version}"}"]
    }

    dockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: "${project.name}:${project.version}"}"]
    }
}

dockerfile.dependsOn('prepareData')

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock")
    processing {
        incremental(true)
        annotations("org.jacksonlaboratory.*")
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << "-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop,swagger-ui.js.url=/api/${System.env.ONTOLOGY}/docs/res/,swagger-ui.theme.url=/api/${System.env.ONTOLOGY}/docs/".toString()
}



